use std::{fs, path::PathBuf};
use std::process::Command;
use tauri::command;

#[command]
pub async fn create_project(
    name: String,
    location: String,
    python_version: String
) -> Result<(), String> {
    let base_path = PathBuf::from(&location).join(&name);

    tauri::async_runtime::spawn_blocking(move || {
        // 1. Create project root directory
        fs::create_dir_all(&base_path)
            .map_err(|e| format!("Failed to create project folder: {}", e))?;

        // 2. Run `uv init` to scaffold project with pyproject.toml
        let status = Command::new("uv")
            .arg("init")
            .args(&["--python", &python_version])
            .current_dir(&base_path)
            .status()
            .map_err(|e| format!("Failed to run uv init: {}", e))?;
        if !status.success() {
            return Err(format!("uv init failed with status: {}", status));
        }

        // 3. Write README.md file
        let readme_content = format!("# {}\n\nGenerated by PyW3lt.", name);
        fs::write(&base_path.join("README.md"), readme_content)
            .map_err(|e| format!("Failed to create README.md: {}", e))?;

        Ok(())
    })
        .await
        .map_err(|e| e.to_string())?
}