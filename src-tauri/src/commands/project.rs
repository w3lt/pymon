use std::{fs, path::PathBuf};
use std::process::Command;
use serde_json::json;
use tauri::command;

#[command]
pub async fn create_project(
    name: String,
    location: String,
    python_version: String
) -> Result<(), String> {
    let base_path = PathBuf::from(&location).join(&name);

    tauri::async_runtime::spawn_blocking(move || {
        // 1. Create project root directory
        fs::create_dir_all(&base_path)
            .map_err(|e| format!("Failed to create project folder: {}", e))?;

        // 2. Create project.pymon file - metadata file
        let metadata = json!({
        "name": name,
        "description": "A new Pymon project",
        "version": "0.1.0",
        "python_version": python_version,
        "scripts": {
            "dev": "python src/main.py",
        },
        "dependencies": {},
        "devDependencies": {}
    });

        fs::write(&base_path.join("pymon.json"), serde_json::to_string_pretty(&metadata)
            .map_err(|e| format!("Failed to serialize metadata: {}", e))?)
            .map_err(|e| format!("Failed to create metadata file: {}", e))?;

        // 3. Create README.md file
        let readme_content = format!("# {}\n\nGenerated by Pymon.", name);
        fs::write(&base_path.join("README.md"), readme_content)
            .map_err(|e| format!("Failed to create README.md: {}", e))?;

        // 4. Create requirements.txt file
        let requirements_content = "# List your project dependencies here.\n# Example: requests==2.25.1";
        fs::write(&base_path.join("requirements.txt"), requirements_content)
            .map_err(|e| format!("Failed to create requirements.txt: {}", e))?;

        // 5. Create .venv directory
        let python_executable = if python_version.is_empty() {
            "python".to_string()
        } else {
            format!("python{}", python_version)
        };
        Command::new(python_executable.as_str())
            .args(&["-m", "venv", ".venv"])
            .current_dir(&base_path)
            .status()
            .map_err(|e| format!("Failed to create virtual environment: {}", e))?;

        // 6. Create .gitignore file
        let temp_gitignore_content_path = "templates/python.gitignore";
        let project_gitignore_path = base_path.join(".gitignore");
        fs::copy(temp_gitignore_content_path, project_gitignore_path)
            .map_err(|e| format!("Failed to copy .gitignore: {}", e))?;

        // 7. Create src subfolders
        let src_path = base_path.join("src");
        fs::create_dir(&src_path)
            .map_err(|e| format!("Failed to create src folder: {}", e))?;

        // 8. Create src/main.py file
        let main_py_content = "# Main entry point for the Pymon project\n\nif __name__ == '__main__':\n    print('Hello, Paimon!')";
        fs::write(&src_path.join("main.py"), main_py_content)
            .map_err(|e| format!("Failed to create main.py file: {}", e))?;

        Ok(())
    })
        .await
        .map_err(|e| e.to_string())?
}